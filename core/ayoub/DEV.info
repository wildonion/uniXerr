



https://www.lpalmieri.com/posts/2019-12-01-taking-ml-to-production-with-rust-a-25x-speedup/
https://www.lpalmieri.com/posts/2020-09-27-zero-to-production-4-are-we-observable-yet/
https://www.lpalmieri.com/posts/fast-rust-docker-builds/
https://www.lpalmieri.com/posts/an-introduction-to-property-based-testing-in-rust/
https://www.lpalmieri.com/posts/zero-downtime-deployments/
https://www.lpalmieri.com/posts/caching-types-in-a-microservice-architecture/
https://lucumr.pocoo.org/2018/3/31/you-cant-rust-that/
https://lucumr.pocoo.org/2021/11/14/abusing-serde/
https://lucumr.pocoo.org/2022/1/7/as-any-hack/
https://lucumr.pocoo.org/2022/1/6/rust-extension-map/
https://lucumr.pocoo.org/2022/1/30/unsafe-rust/
https://smallcultfollowing.com/babysteps/blog/2022/03/29/dyn-can-we-make-dyn-sized/
https://smallcultfollowing.com/babysteps/blog/2022/04/12/implied-bounds-and-perfect-derive/
https://smallcultfollowing.com/babysteps/blog/2022/04/17/coherence-and-crate-level-where-clauses/
https://smallcultfollowing.com/babysteps/blog/2022/06/15/what-it-feels-like-when-rust-saves-your-bacon/
https://smallcultfollowing.com/babysteps/blog/2022/06/27/many-modes-a-gats-pattern/
https://without.boats/blog/
https://docs.rust-embedded.org/book/
https://stackoverflow.com/questions/41081240/idiomatic-callbacks-in-rust
https://stackoverflow.com/questions/27831944/how-do-i-store-a-closure-in-a-struct-in-rust
https://rust-hosted-langs.github.io/book/introduction.html
https://fasterthanli.me/articles/peeking-inside-a-rust-enum
https://dhghomon.github.io/easy_rust/Chapter_1.html
https://www.youtube.com/watch?v=mwuCMDSZdiQ&ab_channel=ErikDotDev
https://bparli.medium.com/adventures-in-rust-and-load-balancers-73a0bc61a192
https://github.com/jsdw/weave
https://github.com/hyperium/hyper/blob/master/examples/http_proxy.rs
https://github.com/hyperium/hyper/blob/master/examples/gateway.rs
https://dzone.com/articles/rust-based-load-balancing-proxy-server-with-async
https://truelayer.com/blog/grpc-load-balancing-in-rust
https://medium.com/load-balancer-series/writing-a-http-load-balancer-in-python-using-tdd-theoretical-concepts-fb6dab3e879b
https://kemptechnologies.com/load-balancer/load-balancing-algorithms-techniques
https://doc.rust-lang.org/nightly/rust-by-example/unsafe/asm.html
https://blog.cloudflare.com/pin-and-unpin-in-rust/
https://fasterthanli.me/articles/pin-and-suffering
https://github.com/NicolasLM/nucleon
https://github.com/bparli/convey
http://zderadicka.eu/hyper-websocket/
https://rustwasm.github.io/docs/book/introduction.html
https://www.youtube.com/watch?v=geovSK3wMB8
https://doc.rust-lang.org/reference/attributes.html
http://gradebot.org/doc/ipur/trait.html
https://cheats.rs/#behind-the-scenes
https://doc.rust-lang.org/beta/unstable-book/language-features/generators.html
https://stackoverflow.com/questions/28127165/how-to-convert-struct-to-u8
https://stackoverflow.com/questions/2490912/what-are-pinned-objects
https://rust-lang.github.io/async-book/01_getting_started/01_chapter.html
https://github.com/zupzup/warp-websockets-example
https://danielkeep.github.io/tlborm/book/
https://doc.rust-lang.org/std/marker/struct.PhantomData.html
https://doc.rust-lang.org/std/pin/index.html
https://doc.rust-lang.org/std/sync/struct.Arc.html
https://doc.rust-lang.org/std/rc/struct.Rc.html
https://doc.rust-lang.org/std/sync/struct.Mutex.html
https://doc.rust-lang.org/std/sync/struct.RwLock.html
https://doc.rust-lang.org/std/cell/struct.RefMut.html
https://doc.rust-lang.org/std/cell/struct.RefCell.html
https://doc.rust-lang.org/std/rc/struct.Weak.html
https://doc.rust-lang.org/std/keyword.dyn.html
https://doc.rust-lang.org/book/ch15-05-interior-mutability.html
https://github.com/wildonion/stomegranate/blob/master/helper_board
https://rust-lang-nursery.github.io/rust-cookbook/intro.html
https://doc.rust-lang.org/nomicon/
https://stackoverflow.com/questions/56445095/how-does-videojs-determine-when-to-use-hls-vs-mp4-video-when-both-sources-are-av#:~:text=MP4%20and%20HLS%20are%20actually,a%20server%20to%20a%20client.
https://docs.peer5.com/guides/production-ready-hls-vod/
https://blog.tempus-ex.com/hello-video-codec/
https://github.com/alordash/newton-fractal
https://nnethercote.github.io/perf-book/title-page.html
https://doc.rust-lang.org/1.30.0/book/2018-edition/ch00-00-introduction.html
https://kerkour.com/rust-fearless-concurrency
https://veykril.github.io/tlborm/
https://rust-cli.github.io/book/
https://nomicon.io/RuntimeSpec/ -> use near design pattern cause it's a sharded based blockchain
https://github.com/Bitdad-Dev/bitzio-nft-near-contracts/blob/master/NEAR.rules -> near design pattern explained 
https://stackoverflow.com/questions/41823321/how-to-get-pointer-offset-of-an-enum-member-in-bytes
https://stackoverflow.com/questions/27324821/why-does-an-enum-require-extra-memory-size
https://docs.tendermint.com/master/
https://fasterthanli.me/articles/remote-development-with-rust-on-fly-io
https://rust-unofficial.github.io/patterns/
https://medium.com/@knoldus/design-patterns-in-rust-programming-e5c5ad6ec1a7
https://book.avr-rust.com/001-introduction.html
https://kerkour.com/rust-functional-programming
https://blog.subnetzero.io/post/building-language-vm-part-01/
https://rust-hosted-langs.github.io/book/
https://opensource.com/article/19/3/rust-virtual-machine
https://medium.com/iridium-vm/so-you-want-to-build-a-language-vm-in-rust-part-09-15d90084002
https://medium.com/clevyio/using-rust-and-nom-to-create-an-open-source-programming-language-for-chatbots-12fe67582af5
https://crates.io/crates/hotham -> VR engine in rust
https://github.com/Bitdad-Dev/bitzio-nft-near-contracts
https://www.i-programmer.info/programming/theory.html
https://www.i-programmer.info/babbages-bag/
https://github.com/pretzelhammer/rust-blog/blob/master/posts/common-rust-lifetime-misconceptions.md#the-misconceptions
https://blog.yoshuawuyts.com/
https://github.com/amqp-rs/lapin
https://docs.krustlet.dev/
https://crates.io/crates/kube
https://stackoverflow.com/a/57894943/12132470 -> return pointer from function
https://stackoverflow.com/questions/37789925/how-to-return-a-newly-created-struct-as-a-reference
https://github.com/wildonion/extrust/tree/master/_docs
https://rodent.club/queue-manager
https://www.fpcomplete.com/blog/http-status-codes-async-rust/
https://github.com/wildonion/thedos/







------------------------------------------------------------------------
       networking projects with rabbitmq, tokio, hyper and riker  
------------------------------------------------------------------------
--- TASK --- add k8s configs for ayoub to balancing the request loads
--- TASK --- hoopoe and async jobq coding
[TASK] - coniXerr wallet (walleXerr) in yew to build a wasm file using rafael runtime build() method like cloudflare and shuttle runtime to load the wasm file in js 
[TASK] - add XChaCha20Poly1305 end-to-end encryption for socket tls between walleXerr and the coiniXerr streaming servers: tcp + (rtp folder)
[TASK] - coiniXerr reset slot, mempool channel, runtime log, consensus and block validation process, transaction signature, block and merkle root and wallet address using Argon2 based on XChaCha20Poly1305 end-to-end encryption
TASK - implement a reactive paradigm code for the server/client and async jobq channel protocols (like mpsc, mcsp and spsc) of a pub-sub (producer(s)-consumer(s)) streaming message broker system like rabbitmq, kafka and mqtt using tokio and multithreading riker actors (riker messages can be scheduled to be executed and broadcast to other subs at a specific time)
TASK - p2p music player, voice and video streaming based on k8s and the implemented message broker in above TASK
TASK - build an ssl (obfuscated connection) based proxy server/client like nginx, pingora, v2ray protocols, softether and tor snowflake using hyper and tokio on layer4 based on tcp/udp/grpc/websocket and riker actors to bypass the cencorship using cryptography (zero proof of knowledge) and networking (ipatables) concepts
TASK - build a load balancer runtime like k8s using cpu task (thread) scheduling algos (runtime scheduler will decide what task can be executed right now or later) like round robin dns, vector clock, event loop, simd vectorization and weighted round robin for ayoub using hyper and tokio on layer 1 and 2 (tcp/udp/grpc/websocket) based on and riker actors (every load balancer instance is an actor which can manage the server load instance inside their threadpool and every server instance can handle 144000 requests per second so with our load balance we must be able to spread the requests between each server node efficiently based on dns based round robin algo)
TASK - dpi to detect anomal packets to coiniXerr server and automatic load balancer and vps config using transformers and drl
TASK - build something like ngrok using ssh tunnels
TASK - object storage like MinIO and S3
TASK - download/upload manager like IDM/tus.io
TASK - audio/video codec ((de)compression or (de)serializing) like ffmepg or gstreamer protocols and algos and audio and video streaming, media and data channel using webrtc 
TASK - an event streaming platform like VoD and FoD protocol like arvancloud based for streaming over video (Vod) chunks using ffmpeg and gstreamer in rust based on hls which is an adaptive bitrate method 
        - convert uploaded videos to hls for multi bitrate conversion
        - create an endpoint api to point where the hls is
        - call the api to load in html5 video tag
        - a file on demand protocol to upload files and return their id