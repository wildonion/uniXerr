

Cassandra Explanations:
    [+] A primary key uniquely identifies a row, composed of partition key(s) [and optional clustering keys(or columns)]
    [+] A composite key is a key formed from multiple columns.
    [+] A partition key is the primary lookup to find a set of rows, i.e. a partition. The hash value of Partition key is used to determine the specific node in a cluster to store the data [multiple nodes are within a cluster or datacenter]
    [+] A clustering key is the part of the primary key that isn't the partition key and defines the ordering within a partition or responsible node and it's replicas.
    [+] Compound Primary Key: The clustering keys are optional in a Primary Key. If they aren't mentioned, it's a simple primary key. If clustering keys are mentioned, it's a Compound primary key.
    [+] Composite Partition Key: Using just one column as a partition key, might result in wide row issues (depends on use case/data modeling). Hence the partition key is sometimes specified as a combination of more than one column.
    [+] All select and insert queries must be specified a partition key or a set of these keys, if the key doesn't exist it'll insert otherwise i'll update because of caching strategy.
    [+] Cassandra is based on column family architecture, means that you can insert a row filled just a few columns only and not all of them and according to this architecture cassandra can store 2 billions cells (rows X column key X column value).
    [+] Each row will be inside a partition and the node to put that partition into will choose based on the range number returned by hashing of row partition key function, for example node1 will have a partition containing all rows with hashed keys between 20 up to 45.
    [+] Rows inside its own partition (which is in its related node) will be order based on their clustering key.
    [+] Every node owns a specific partition(contains rows) and copies(replicas) of each partition in its node will be inside another node.
    [+] A logical grouping of cassandra nodes within the ring are called rack and cassrandra uses it to ensure that replicas are distributed among different logical groupings.
    [+] The partition key must be supplied for every read operation in order to fetch from its partition inside the node that owns the hash of this partition key, cause each node owns a set of keys or a range of numbers that shows this node only accepts these hash of keys.
    [+] When some query should be performed inside a cdrs_tokio session in our cluster:
        Load balancer should balance between all the ndoes inside the cluster(datacenter)
        Load balancer must select a node according to its strategy
        Load balancer will returns a pool of connections for the selected node
        CDRS gets from bb8 pool one of available connections
    [+] Examples:
        PRIMARY KEY (a): The partition key is a.
        PRIMARY KEY (a, b): The partition key is a, the clustering key is b.
        PRIMARY KEY ((a, b)): The composite partition key is (a, b).
        PRIMARY KEY (a, b, c): The partition key is a, the composite clustering key is (b, c).
        PRIMARY KEY ((a, b), c): The composite partition key is (a, b), the clustering key is c.
        PRIMARY KEY ((a, b), c, d): The composite partition key is (a, b), the composite clustering key is (c, d).
    [+] All cassandra nodes or cassandra servers are inside a cluster(datacenter) and we can combine these clusters(datacenters) to create racks cloud based database. 