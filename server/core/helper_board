refs : 
https://github.com/telegram-rs/telegram-bot
https://github.com/teloxide/teloxide
https://github.com/wildonion/aravl
https://cheats.rs/#behind-the-scenes
https://users.rust-lang.org/t/2018-modules-again/23169
https://rust-lang.github.io/rustup/index.html
https://os.phil-opp.com/
https://learning-rust.github.io/docs/a1.why_rust.html
https://www.rust-lang.org/learn
https://doc.rust-lang.org/reference/items/use-declarations.html
https://rust-lang-nursery.github.io/rust-cookbook/
https://rust-lang.github.io/rustup/
https://bryce.fisher-fleig.org/strategies-for-returning-references-in-rust/
https://rust-lang.github.io/async-book
https://stackoverflow.com/questions/28800121/what-do-i-have-to-do-to-solve-a-use-of-moved-value-error
https://lib.rs/crates/tch
https://doc.rust-lang.org/book/ch19-00-advanced-features.html
https://doc.rust-lang.org/book/ch20-03-graceful-shutdown-and-cleanup.html
https://doc.rust-lang.org/book/ch17-00-oop.html


rust server for :
pre-trained AI models inside core folder 
training DL and ML algorithms from scratch like GNN and transformers using multhreading and multiprocessing protocols


using :
uPC telegram bot
multithreading sockets async tasks queue and messaging channel protocols
multithreading async event or task streaming using tokio and kafka channel queue for training AI cores in realtime manner


tools :
tch, tokio, actix, thread::spawn, kafka, docker and k8s based on streaming async paradigm


bindings :
bind this server in python like import its .so file using pyo3 rust crate


helper commands : 
cargo install systemfd cargo-watch
systemfd --no-pid -s http::8587 -- cargo watch -x run
cargo new core --bin
cargo run core
cargo build --bin core --release
cargo watch -x run
