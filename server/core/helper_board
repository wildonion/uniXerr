refs : 
https://github.com/telegram-rs/telegram-bot
https://github.com/teloxide/teloxide
https://github.com/wildonion/aravl
https://cheats.rs/#behind-the-scenes
https://users.rust-lang.org/t/2018-modules-again/23169
https://rust-lang.github.io/rustup/index.html
https://os.phil-opp.com/
https://learning-rust.github.io/docs/a1.why_rust.html
https://www.rust-lang.org/learn
https://doc.rust-lang.org/reference/items/use-declarations.html
https://rust-lang-nursery.github.io/rust-cookbook/
https://rust-lang.github.io/rustup/
https://bryce.fisher-fleig.org/strategies-for-returning-references-in-rust/
https://rust-lang.github.io/async-book
https://stackoverflow.com/questions/28800121/what-do-i-have-to-do-to-solve-a-use-of-moved-value-error
https://lib.rs/crates/tch
https://doc.rust-lang.org/book/ch19-00-advanced-features.html
https://doc.rust-lang.org/book/ch20-00-final-project-a-web-server.html
https://doc.rust-lang.org/book/ch17-00-oop.html
https://cetra3.github.io/blog/implementing-a-jobq/
https://github.com/wildonion/aravl
https://github.com/telegram-rs/telegram-bot
https://github.com/teloxide/teloxide
https://github.com/PyO3/pyo3
https://github.com/wildonion/stomegranate
https://github.com/v1s1t0r1sh3r3/airgeddon



rust server for :
kafka     => cluster(datacenter or VPS) <-has-> nodes(multiple instances of kafka brokers or servers) <-has-> topics <-has-> partitions <-has-> buck of events inside each partition
cassandra => cluster(datacenter or VPS) <-has-> nodes(multiple instances of cassandra db server) <-has-> partition replicas <-has-> rows  
kafka consumers to subscribe published events (training data) from its related topic partitions through the channel queue coming from producers inside brokers (servers) 
the uPC telegram bot for pre-trained AI models inside core folder 
training DL and ML algorithms from scratch like GNN and transformers using event streaming, realtime processing, multhreading and multiprocessing protocols
implementation of multithreaded async job queue channel server from scratch 
something like laZagne and mimikatz
build a network monitoring handler like openwrt using tokio, a reverse proxy like ngrok and evil twins like airgeddon


using :
async task and messaging for multithreading socket event streaming with job queue mpsc channel using tokio and kafka by awaiting and joining on futures and threads and sharing large amounts of data using dataloader batches.


tools :
tch, tokio, actix, thread::spawn, kafka, docker and k8s based on streaming async paradigm


bindings :
bind this server like its .so file in python using PyO3


helper commands : 
cargo install systemfd cargo-watch
systemfd --no-pid -s http::8587 -- cargo watch -x run
cargo new core --bin
cargo run core
cargo build --bin core --release
cargo watch -x run
